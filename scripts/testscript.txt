/*
function[281] randomCommands
function[46] enumTest
function[203] testInCommand
function[77] objTest
function[1] onCreated
function[108] testFor
*/

//#CLIENTSIDE
// Enums directly replaced with incremented integers starting at 0
enum {
  EIDLE,
  EWALK,
  ESLASH
};

function onCreated() {
  /*
         8,         5: temp. (189)
         9,         6: type(variable) (22) (Opcode: 0xF0)  - variable[0](somethin) (byte)
        12,         7: member access (35)
        13,         8: type(array) (23)
        14,         9: type(variable) (22) (Opcode: 0xF0)  - variable[1](objTest) (byte)
        17,        10: Call function (6)
        18,        11: "=" (50)
  */
  temp.somethin = objTest();
  
  randomCommands();
  testFor();
  testInCommand();
  enumTest();
  
  /*
        43,        28: temp. (189)
        44,        29: type(variable) (22) (Opcode: 0xF0)  - variable[0](somethin) (byte)
        47,        30: member access (35)
        48,        31: Convert to object (36)
        49,        32: type(variable) (22) (Opcode: 0xF0)  - variable[6](pl) (byte)
        52,        33: member access (35)
        53,        34: Convert to object (36)
        54,        35: with (150) (Opcode: 0xF3)  - double(43) (byte)
        57,        36: type(variable) (22) (Opcode: 0xF0)  - variable[7](x) (byte)
        60,        37: Copy last operand (30)
        61,        38: Convert to float (33)
        62,        39: type(number) (20) (Opcode: 0xF3)  - double(5) (byte)
        65,        40: + (60)
        66,        41: "=" (50)
        67,        42: End of with (151)
  */
  with (temp.somethin.pl) {
    x += 5;
  }
}

function enumTest() {
  echo("Enum IDLE: " @ EIDLE);
  echo("Enum WALK: " @ EWALK);
  echo("Enum SLASH: " @ ESLASH);
}

function objTest() {
  /*
       133,        80: temp. (189)
       134,        81: type(variable) (22) (Opcode: 0xF0)  - variable[12](a) (byte)
       137,        82: member access (35)
       138,        83: type(variable) (22) (Opcode: 0xF0)  - variable[13](unknown_object) (byte)
       141,        84: type(string) (21) (Opcode: 0xF0)  - variable[14](TStaticVar) (byte)
       144,        85: new Object? (42)
       145,        86: "=" (50)
  */
  temp.a = new TStaticVar();
  
  /*
       146,        87: temp. (189)
       147,        88: type(variable) (22) (Opcode: 0xF0)  - variable[12](a) (byte)
       150,        89: member access (35)
       151,        90: Convert to object (36)
       152,        91: type(variable) (22) (Opcode: 0xF0)  - variable[15](val) (byte)
       155,        92: member access (35)
       156,        93: type(number) (20) (Opcode: 0xF3)  - double(2) (byte)
       159,        94: "=" (50)
  */
  temp.a.val = 2;
  
  /*
       160,        95: temp. (189)
       161,        96: type(variable) (22) (Opcode: 0xF0)  - variable[12](a) (byte)
       164,        97: member access (35)
       165,        98: Convert to object (36)
       166,        99: type(variable) (22) (Opcode: 0xF0)  - variable[6](pl) (byte)
       169,       100: member access (35)
       170,       101: type(variable) (22) (Opcode: 0xF0)  - variable[16](player) (byte)
       173,       102: "=" (50)
  */
  temp.a.pl = player;
  
  /*
       174,       103: temp. (189)
       175,       104: type(variable) (22) (Opcode: 0xF0)  - variable[12](a) (byte)
       178,       105: member access (35)
       179,       106: }   //End of function code (7)
  */
  return temp.a;
}

function testFor() {
  temp.arr = {"abc", "def", "gh", "ijk"};
  
  echo("foreach");
  for (temp.a : temp.arr) {
    echo(temp.a);
  }
  
  echo("forloop");
  for (temp.i = 0; temp.i < temp.arr.size(); temp.i++) {
    echo(temp.arr[temp.i]);
  }
  
  /*
       343,       195: temp. (189)
       344,       196: type(variable) (22) (Opcode: 0xF0)  - variable[17](arr) (byte)
       347,       197: member access (35)
       348,       198: Convert to object (36)
       349,       199: obj.clear() (141)
  */
  // clear array
  temp.arr.clear();
}

function testInCommand() {
  /*
       362,       207: temp. (189)
       363,       208: type(variable) (22) (Opcode: 0xF0)  - variable[17](arr) (byte)
       366,       209: member access (35)
       367,       210: type(array) (23)
       368,       211: type(string) (21) (Opcode: 0xF0)  - variable[19](ijk) (byte)
       371,       212: type(string) (21) (Opcode: 0xF0)  - variable[20](gh) (byte)
       374,       213: type(string) (21) (Opcode: 0xF0)  - variable[21](def) (byte)
       377,       214: type(string) (21) (Opcode: 0xF0)  - variable[22](abc) (byte)
       380,       215: End of array (37)
       381,       216: "=" (50)
  */
  temp.arr = {"abc", "def", "gh", "ijk"};
  
  /*
       382,       217: type(string) (21) (Opcode: 0xF0)  - variable[20](gh) (byte)
       385,       218: temp. (189)
       386,       219: type(variable) (22) (Opcode: 0xF0)  - variable[17](arr) (byte)
       389,       220: member access (35)
       390,       221: Convert to object (36)
       391,       222: in {} (81)
       392,       223: if (4) (Opcode: 0xF4)  - double(229) (word)
       396,       224: type(array) (23)
       397,       225: type(string) (21) (Opcode: 0xF0)  - variable[25](found) (byte)
       400,       226: type(variable) (22) (Opcode: 0xF0)  - variable[9](echo) (byte)
       403,       227: Call function (6)
       404,       228: Decrease last operand index by 1 (32)
  */
  if ("gh" in temp.arr) {
    echo("found");
  }
  
  /*
       405,       229: temp. (189)
       406,       230: type(variable) (22) (Opcode: 0xF0)  - variable[18](i) (byte)
       409,       231: member access (35)
       410,       232: type(array) (23)
       411,       233: player. (182)
       412,       234: type(variable) (22) (Opcode: 0xF0)  - variable[26](y) (byte)
       415,       235: member access (35)
       416,       236: player. (182)
       417,       237: type(variable) (22) (Opcode: 0xF0)  - variable[7](x) (byte)
       420,       238: member access (35)
       421,       239: End of array (37)
       422,       240: type(number) (20) (Opcode: 0xF3)  - double(20) (byte)
       425,       241: type(number) (20) (Opcode: 0xF3)  - double(40) (byte)
       428,       242: in <> (80) (Opcode: 0xF3)  - double(3) (byte)
       431,       243: "=" (50)
  */
  temp.i = ({playerx,playery} in <20,40>);
  
  /*
       432,       244: type(array) (23)
       433,       245: type(string) (21) (Opcode: 0xF0)  - variable[27](valid: ) (byte)
       436,       246: temp. (189)
       437,       247: type(variable) (22) (Opcode: 0xF0)  - variable[18](i) (byte)
       440,       248: member access (35)
       441,       249: Convert to string (34)
       442,       250: @ (113)
       443,       251: type(variable) (22) (Opcode: 0xF0)  - variable[9](echo) (byte)
       446,       252: Call function (6)
       447,       253: Decrease last operand index by 1 (32)
  */
  echo("valid: " @ temp.i);
  
  /*
       448,       254: type(variable) (22) (Opcode: 0xF0)  - variable[28](v) (byte)
       451,       255: player. (182)
       452,       256: type(variable) (22) (Opcode: 0xF0)  - variable[7](x) (byte)
       455,       257: member access (35)
       456,       258: type(number) (20) (Opcode: 0xF3)  - double(20) (byte)
       459,       259: type(number) (20) (Opcode: 0xF3)  - double(40) (byte)
       462,       260: in <> (80) (Opcode: 0xF3)  - double(3) (byte)
       465,       261: && (5) (Opcode: 0xF4)  - double(268) (word)
       469,       262: player. (182)
       470,       263: type(variable) (22) (Opcode: 0xF0)  - variable[26](y) (byte)
       473,       264: member access (35)
       474,       265: type(number) (20) (Opcode: 0xF3)  - double(20) (byte)
       477,       266: type(number) (20) (Opcode: 0xF3)  - double(40) (byte)
       480,       267: in <> (80) (Opcode: 0xF3)  - double(3) (byte)
       483,       268: End of inline conditional? (44)
       484,       269: "=" (50)
  */
  v = (playerx in <20,40> && playery in <20,40>);

  /*
       485,       270: type(array) (23)
       486,       271: type(string) (21) (Opcode: 0xF0)  - variable[27](valid: ) (byte)
       489,       272: type(variable) (22) (Opcode: 0xF0)  - variable[28](v) (byte)
       492,       273: Convert to string (34)
       493,       274: @ (113)
       494,       275: type(variable) (22) (Opcode: 0xF0)  - variable[9](echo) (byte)
       497,       276: Call function (6)
       498,       277: Decrease last operand index by 1 (32)
  */
  echo("valid: " @ v);
}

function randomCommands() {
  // expect dec --- actual: was removed from bytecode
  format("Hello, %s. You ate %i apples today!", "Mr. Skyld", 4);
  
  /*
       511,       285: this. (180)
       512,       286: type(variable) (22) (Opcode: 0xF0)  - variable[29](str) (byte)
       515,       287: member access (35)
       516,       288: type(array) (23)
       517,       289: type(number) (20) (Opcode: 0xF3)  - double(4) (byte)
       520,       290: type(string) (21) (Opcode: 0xF0)  - variable[30](Mr. Skyld) (byte)
       523,       291: type(string) (21) (Opcode: 0xF0)  - variable[31](Hello, %s. You ate %i apples today!) (byte)
       526,       292: format() (84)
       527,       293: "=" (50)
  */
  this.str = format("Hello, %s. You ate %i apples today!", "Mr. Skyld", 4);
  
  /*
       528,       294: this. (180)
       529,       295: type(variable) (22) (Opcode: 0xF0)  - variable[32](strpos) (byte)
       532,       296: member access (35)
       533,       297: this. (180)
       534,       298: type(variable) (22) (Opcode: 0xF0)  - variable[29](str) (byte)
       537,       299: member access (35)
       538,       300: Convert to string (34)
       539,       301: type(string) (21) (Opcode: 0xF0)  - variable[33](Skyld) (byte)
       542,       302: obj.pos() (112)
       543,       303: "=" (50)
  */
  this.strpos = this.str.pos("Skyld");

  /*
       544,       304: type(array) (23)
       545,       305: type(string) (21) (Opcode: 0xF0)  - variable[34](pos: ) (byte)
       548,       306: this. (180)
       549,       307: type(variable) (22) (Opcode: 0xF0)  - variable[32](strpos) (byte)
       552,       308: member access (35)
       553,       309: Convert to string (34)
       554,       310: @ (113)
       555,       311: type(variable) (22) (Opcode: 0xF0)  - variable[9](echo) (byte)
       558,       312: Call function (6)
       559,       313: Decrease last operand index by 1 (32)
  */
  echo("pos: " @ this.strpos);

  /*
       560,       314: thiso. (181)
       561,       315: type(variable) (22) (Opcode: 0xF0)  - variable[17](arr) (byte)
       564,       316: member access (35)
       565,       317: type(array) (23)
       566,       318: type(string) (21) (Opcode: 0xF0)  - variable[35](etc) (byte)
       569,       319: type(string) (21) (Opcode: 0xF0)  - variable[36](second member) (byte)
       572,       320: type(string) (21) (Opcode: 0xF0)  - variable[37](First member) (byte)
       575,       321: End of array (37)
       576,       322: "=" (50)
  */
  thiso.arr = {"First member", "second member", "etc"};

  /*
       577,       323: type(array) (23)
       578,       324: type(string) (21) (Opcode: 0xF0)  - variable[38](size: ) (byte)
       581,       325: thiso. (181)
       582,       326: type(variable) (22) (Opcode: 0xF0)  - variable[17](arr) (byte)
       585,       327: member access (35)
       586,       328: Convert to object (36)
       587,       329: obj.size() (130)
       588,       330: Convert to string (34)
       589,       331: @ (113)
       590,       332: type(variable) (22) (Opcode: 0xF0)  - variable[9](echo) (byte)
       593,       333: Call function (6)
       594,       334: Decrease last operand index by 1 (32)
  */
  echo("size: " @ thiso.arr.size());
  
  /*
       595,       335: temp. (189)
       596,       336: type(variable) (22) (Opcode: 0xF0)  - variable[39](num) (byte)
       599,       337: member access (35)
       600,       338: type(number) (20) (Opcode: 0xF3)  - double(1) (byte)
       603,       339: type(number) (20) (Opcode: 0xF3)  - double(10) (byte)
       606,       340: random() (87)
       607,       341: Convert to float (33)
       608,       342: type(number) (20) (Opcode: 0xF3)  - double(7) (byte)
       611,       343: max() (94)
       612,       344: "=" (50)
  */
  temp.num = max(random(1, 10), 7);
  
  /*
       613,       345: temp. (189)
       614,       346: type(variable) (22) (Opcode: 0xF0)  - variable[40](tvar) (byte)
       617,       347: member access (35)
       618,       348: type(array) (23)
       619,       349: type(variable) (22) (Opcode: 0xF0)  - variable[41](timevar2) (byte)
       622,       350: type(variable) (22) (Opcode: 0xF0)  - variable[42](timevar) (byte)
       625,       351: End of array (37)
       626,       352: "=" (50)
  */
  temp.tvar = {timevar, timevar2};
}

===================================================

function onCreated() {
  this.obj = {"abcd", "efgh", "i"};
  this.obj.add("test");
  this.obj.delete(0);
  this.obj.remove("i");
  this.obj.insert(1, "alpha");
  this.obj.replace(2, "bravo");
  
  this.teststr = "Teststr";
  this.teststr = this.teststr.lower();
  this.teststr = this.teststr.upper();
  
  this.obj2 = {};
  temp.arr1 = {"abc", "def", "ghi"};
  temp.arr2 = {"jkl", "mno", "pqr"};
  this.obj2.addarray(temp.arr2);
  this.obj2.insertarray(1, temp.arr1);

  this.test36 = "hi";
  temp.v = "36";
  echo(makevar("this.test" @ temp.v));

  temp.val = serverr.someflag;
  echo(temp.val);
  
  temp.randfloat = float("420.69");
  echo(temp.randfloat);

  temp.escapestr = "test',str";
  echo(temp.escapestr.escape());
  
  sleep(0.1);

  arrayInit();
  testLoop();
}

function arrayInit()
{
  this.obj3 = new[4];  
  this.obj3[1] = "hi";

  this.obj4 = new[4][2][1];

  this.obj5 = this.getfunctions();
  this.obj6 = this.getvarnames();
  this.obj7 = this.getdynamicvarnames();
  this.obj8 = this.geteditvarnames();
  this.obj9 = this.getstaticvarnames();
}

function testLoop()
{
  for (temp.v : this.obj) {
    echo("T: " @ temp.v);
  }
}

=========================================

//#CLIENTSIDE
function onCreated() {
/*
         8,         5: this. (180)
         9,         6: type(variable) (22) (Opcode: 0xF0)  - variable[0](obj) (byte)
        12,         7: member access (35)
        13,         8: type(array) (23)
        14,         9: type(string) (21) (Opcode: 0xF0)  - variable[1](i) (byte)
        17,        10: type(string) (21) (Opcode: 0xF0)  - variable[2](efgh) (byte)
        20,        11: type(string) (21) (Opcode: 0xF0)  - variable[3](abcd) (byte)
        23,        12: End of array (37)
        24,        13: "=" (50)
*/
  this.obj = {"abcd", "efgh", "i"};

/*
        25,        14: this. (180)
        26,        15: type(variable) (22) (Opcode: 0xF0)  - variable[0](obj) (byte)
        29,        16: member access (35)
        30,        17: Convert to object (36)
        31,        18: type(string) (21) (Opcode: 0xF0)  - variable[4](test) (byte)
        34,        19: addstring() (136)
*/
  this.obj.add("test");

/*
        35,        20: this. (180)
        36,        21: type(variable) (22) (Opcode: 0xF0)  - variable[0](obj) (byte)
        39,        22: member access (35)
        40,        23: Convert to object (36)
        41,        24: type(number) (20) (Opcode: 0xF3)  - double(0) (byte)
        44,        25: deletestring() (137)
*/
  this.obj.delete(0);

/*
        45,        26: this. (180)
        46,        27: type(variable) (22) (Opcode: 0xF0)  - variable[0](obj) (byte)
        49,        28: member access (35)
        50,        29: Convert to object (36)
        51,        30: type(string) (21) (Opcode: 0xF0)  - variable[1](i) (byte)
        54,        31: removestring() (138)
*/
  this.obj.remove("i");

/*
        55,        32: this. (180)
        56,        33: type(variable) (22) (Opcode: 0xF0)  - variable[0](obj) (byte)
        59,        34: member access (35)
        60,        35: Convert to object (36)
        61,        36: type(string) (21) (Opcode: 0xF0)  - variable[5](alpha) (byte)
        64,        37: type(number) (20) (Opcode: 0xF3)  - double(1) (byte)
        67,        38: insertstring() (140)
*/
  this.obj.insert(1, "alpha");

/*
        68,        39: this. (180)
        69,        40: type(variable) (22) (Opcode: 0xF0)  - variable[0](obj) (byte)
        72,        41: member access (35)
        73,        42: Convert to object (36)
        74,        43: type(string) (21) (Opcode: 0xF0)  - variable[6](bravo) (byte)
        77,        44: type(number) (20) (Opcode: 0xF3)  - double(2) (byte)
        80,        45: replacestring() (139)
*/
  this.obj.replace(2, "bravo");
  
/*
        81,        46: this. (180)
        82,        47: type(variable) (22) (Opcode: 0xF0)  - variable[7](teststr) (byte)
        85,        48: member access (35)
        86,        49: type(string) (21) (Opcode: 0xF0)  - variable[8](Teststr) (byte)
        89,        50: "=" (50)
*/
  this.teststr = "Teststr";

/*
        90,        51: this. (180)
        91,        52: type(variable) (22) (Opcode: 0xF0)  - variable[7](teststr) (byte)
        94,        53: member access (35)
        95,        54: type(array) (23)
        96,        55: this. (180)
        97,        56: type(variable) (22) (Opcode: 0xF0)  - variable[7](teststr) (byte)
       100,        57: member access (35)
       101,        58: Convert to string (34)
       102,        59: type(variable) (22) (Opcode: 0xF0)  - variable[9](lowercase) (byte)
       105,        60: Call function (6)
       106,        61: "=" (50)
*/
  this.teststr = this.teststr.lower();

/*
       107,        62: this. (180)
       108,        63: type(variable) (22) (Opcode: 0xF0)  - variable[7](teststr) (byte)
       111,        64: member access (35)
       112,        65: type(array) (23)
       113,        66: this. (180)
       114,        67: type(variable) (22) (Opcode: 0xF0)  - variable[7](teststr) (byte)
       117,        68: member access (35)
       118,        69: Convert to string (34)
       119,        70: type(variable) (22) (Opcode: 0xF0)  - variable[10](uppercase) (byte)
       122,        71: Call function (6)
       123,        72: "=" (50)
*/
  this.teststr = this.teststr.upper();
  
/*
       124,        73: this. (180)
       125,        74: type(variable) (22) (Opcode: 0xF0)  - variable[11](obj2) (byte)
       128,        75: member access (35)
       129,        76: type(array) (23)
       130,        77: End of array (37)
       131,        78: "=" (50)
*/
  this.obj2 = {};

/*
       132,        79: temp. (189)
       133,        80: type(variable) (22) (Opcode: 0xF0)  - variable[12](arr1) (byte)
       136,        81: member access (35)
       137,        82: type(array) (23)
       138,        83: type(string) (21) (Opcode: 0xF0)  - variable[13](ghi) (byte)
       141,        84: type(string) (21) (Opcode: 0xF0)  - variable[14](def) (byte)
       144,        85: type(string) (21) (Opcode: 0xF0)  - variable[15](abc) (byte)
       147,        86: End of array (37)
       148,        87: "=" (50)
*/
  temp.arr1 = {"abc", "def", "ghi"};

/*
       149,        88: temp. (189)
       150,        89: type(variable) (22) (Opcode: 0xF0)  - variable[16](arr2) (byte)
       153,        90: member access (35)
       154,        91: type(array) (23)
       155,        92: type(string) (21) (Opcode: 0xF0)  - variable[17](pqr) (byte)
       158,        93: type(string) (21) (Opcode: 0xF0)  - variable[18](mno) (byte)
       161,        94: type(string) (21) (Opcode: 0xF0)  - variable[19](jkl) (byte)
       164,        95: End of array (37)
       165,        96: "=" (50)
*/
  temp.arr2 = {"jkl", "mno", "pqr"};

/*
       166,        97: type(array) (23)
       167,        98: temp. (189)
       168,        99: type(variable) (22) (Opcode: 0xF0)  - variable[16](arr2) (byte)
       171,       100: member access (35)
       172,       101: this. (180)
       173,       102: type(variable) (22) (Opcode: 0xF0)  - variable[11](obj2) (byte)
       176,       103: member access (35)
       177,       104: Convert to object (36)
       178,       105: type(variable) (22) (Opcode: 0xF0)  - variable[20](addarray) (byte)
       181,       106: member access (35)
       182,       107: Call function (6)
       183,       108: Decrease last operand index by 1 (32)
*/
  this.obj2.addarray(temp.arr2);

/*
       184,       109: type(array) (23)
       185,       110: temp. (189)
       186,       111: type(variable) (22) (Opcode: 0xF0)  - variable[12](arr1) (byte)
       189,       112: member access (35)
       190,       113: type(number) (20) (Opcode: 0xF3)  - double(1) (byte)
       193,       114: this. (180)
       194,       115: type(variable) (22) (Opcode: 0xF0)  - variable[11](obj2) (byte)
       197,       116: member access (35)
       198,       117: Convert to object (36)
       199,       118: type(variable) (22) (Opcode: 0xF0)  - variable[21](insertarray) (byte)
       202,       119: member access (35)
       203,       120: Call function (6)
       204,       121: Decrease last operand index by 1 (32)
*/
  this.obj2.insertarray(1, temp.arr1);

/*
       205,       122: this. (180)
       206,       123: type(variable) (22) (Opcode: 0xF0)  - variable[22](test36) (byte)
       209,       124: member access (35)
       210,       125: type(string) (21) (Opcode: 0xF0)  - variable[23](hi) (byte)
       213,       126: "=" (50)
*/
  this.test36 = "hi";

/*
       214,       127: temp. (189)
       215,       128: type(variable) (22) (Opcode: 0xF0)  - variable[24](v) (byte)
       218,       129: member access (35)
       219,       130: type(string) (21) (Opcode: 0xF0)  - variable[25](36) (byte)
       222,       131: "=" (50)
*/
  temp.v = "36";

/*
       223,       132: type(array) (23)
       224,       133: type(string) (21) (Opcode: 0xF0)  - variable[26](this.test) (byte)
       227,       134: temp. (189)
       228,       135: type(variable) (22) (Opcode: 0xF0)  - variable[24](v) (byte)
       231,       136: member access (35)
       232,       137: Convert to string (34)
       233,       138: @ (113)
       234,       139: makevar() (41)
       235,       140: type(variable) (22) (Opcode: 0xF0)  - variable[27](echo) (byte)
       238,       141: Call function (6)
       239,       142: Decrease last operand index by 1 (32)
*/
  echo(makevar("this.test" @ temp.v));

/*
       240,       143: temp. (189)
       241,       144: type(variable) (22) (Opcode: 0xF0)  - variable[28](val) (byte)
       244,       145: member access (35)
       245,       146: type(variable) (22) (Opcode: 0xF0)  - variable[29](serverr) (byte)
       248,       147: Convert to object (36)
       249,       148: type(variable) (22) (Opcode: 0xF0)  - variable[30](someflag) (byte)
       252,       149: member access (35)
       253,       150: "=" (50)
*/
  temp.val = serverr.someflag;
  echo(temp.val);
  
  temp.randfloat = float("420.69");
  echo(temp.randfloat);

  temp.escapestr = "test',str";
  echo(temp.escapestr.escape());
  
/*
       312,       187: type(number) (20) (Opcode: 0xF6)  - double(0.1) (string)
       317,       188: sleep() (8)
*/
  sleep(0.1);

  arrayInit();
  testLoop();
}

function arrayInit()
{
/*
       342,       204: this. (180)
       343,       205: type(variable) (22) (Opcode: 0xF0)  - variable[38](obj3) (byte)
       346,       206: member access (35)
       347,       207: type(number) (20) (Opcode: 0xF3)  - double(4) (byte)
       350,       208: new[] (38)
       351,       209: "=" (50)
*/
  this.obj3 = new[4];

/*
       352,       210: this. (180)
       353,       211: type(variable) (22) (Opcode: 0xF0)  - variable[38](obj3) (byte)
       356,       212: member access (35)
       357,       213: Convert to object (36)
       358,       214: type(number) (20) (Opcode: 0xF3)  - double(1) (byte)
       361,       215: type(string) (21) (Opcode: 0xF0)  - variable[23](hi) (byte)
       364,       216: Array assignment (132)
*/
  this.obj3[1] = "hi";

/*
       365,       217: this. (180)
       366,       218: type(variable) (22) (Opcode: 0xF0)  - variable[39](obj4) (byte)
       369,       219: member access (35)
       370,       220: type(number) (20) (Opcode: 0xF3)  - double(4) (byte)
       373,       221: new[] (38)
       374,       222: type(number) (20) (Opcode: 0xF3)  - double(2) (byte)
       377,       223: new[][] for each extra dimension (142)
       378,       224: type(number) (20) (Opcode: 0xF3)  - double(1) (byte)
       381,       225: new[][] for each extra dimension (142)
       382,       226: "=" (50)
*/
  this.obj4 = new[4][2][1];

/*
       383,       227: this. (180)
       384,       228: type(variable) (22) (Opcode: 0xF0)  - variable[40](obj5) (byte)
       387,       229: member access (35)
       388,       230: type(array) (23)
       389,       231: this. (180)
       390,       232: type(variable) (22) (Opcode: 0xF0)  - variable[41](getfunctions) (byte)
       393,       233: member access (35)
       394,       234: Call function (6)
       395,       235: "=" (50)
*/
  this.obj5 = this.getfunctions();

/*
       396,       236: this. (180)
       397,       237: type(variable) (22) (Opcode: 0xF0)  - variable[42](obj6) (byte)
       400,       238: member access (35)
       401,       239: type(array) (23)
       402,       240: this. (180)
       403,       241: type(variable) (22) (Opcode: 0xF0)  - variable[43](getvarnames) (byte)
       406,       242: member access (35)
       407,       243: Call function (6)
       408,       244: "=" (50)
*/
  this.obj6 = this.getvarnames();

/*
       409,       245: this. (180)
       410,       246: type(variable) (22) (Opcode: 0xF0)  - variable[44](obj7) (byte)
       413,       247: member access (35)
       414,       248: type(array) (23)
       415,       249: this. (180)
       416,       250: type(variable) (22) (Opcode: 0xF0)  - variable[45](getdynamicvarnames) (byte)
       419,       251: member access (35)
       420,       252: Call function (6)
       421,       253: "=" (50)
*/
  this.obj7 = this.getdynamicvarnames();

/*
       422,       254: this. (180)
       423,       255: type(variable) (22) (Opcode: 0xF0)  - variable[46](obj8) (byte)
       426,       256: member access (35)
       427,       257: type(array) (23)
       428,       258: this. (180)
       429,       259: type(variable) (22) (Opcode: 0xF0)  - variable[47](geteditvarnames) (byte)
       432,       260: member access (35)
       433,       261: Call function (6)
       434,       262: "=" (50)
*/
  this.obj8 = this.geteditvarnames();

/*
       435,       263: this. (180)
       436,       264: type(variable) (22) (Opcode: 0xF0)  - variable[48](obj9) (byte)
       439,       265: member access (35)
       440,       266: type(array) (23)
       441,       267: this. (180)
       442,       268: type(variable) (22) (Opcode: 0xF0)  - variable[49](getstaticvarnames) (byte)
       445,       269: member access (35)
       446,       270: Call function (6)
       447,       271: "=" (50)
*/
  this.obj9 = this.getstaticvarnames();
}

/*
      452,       274: Set operation index (1) (Opcode: 0xF4)  - double(316) (word)
       456,       275: type(array) (23)
       457,       276: End of function definition parameters (51)
       458,       277: { //Start of function code? (10)
       459,       278: Start of function call? (9)
       460,       279: temp. (189)
       461,       280: type(variable) (22) (Opcode: 0xF0)  - variable[24](v) (byte)
       464,       281: member access (35)
       465,       282: Mark as loop variable (47)
       466,       283: Assign loop variable index (45) (Opcode: 0xF3)  - double(0) (byte)
       469,       284: Decrease last operand index by 1 (32)
       470,       285: type(variable) (22) (Opcode: 0xF0)  - variable[27](echo) (byte)
       473,       286: Mark as loop variable (47)
       474,       287: Assign loop variable index (45) (Opcode: 0xF3)  - double(1) (byte)
       477,       288: Decrease last operand index by 1 (32)
       478,       289: this. (180)
       479,       290: type(variable) (22) (Opcode: 0xF0)  - variable[0](obj) (byte)
       482,       291: member access (35)
       483,       292: Mark as loop variable (47)
       484,       293: Assign loop variable index (45) (Opcode: 0xF3)  - double(2) (byte)
       487,       294: Decrease last operand index by 1 (32)
       488,       295: Loop variable (46) (Opcode: 0xF3)  - double(0) (byte)
       491,       296: Loop variable (46) (Opcode: 0xF3)  - double(2) (byte)
       494,       297: Convert to object (36)
       495,       298: type(number) (20) (Opcode: 0xF3)  - double(0) (byte)
       498,       299: for (a: b) (163) (Opcode: 0xF4)  - double(311) (word)
       502,       300: Start of function call? (9)
       503,       301: type(array) (23)
       504,       302: type(string) (21) (Opcode: 0xF0)  - variable[50](T: ) (byte)
       507,       303: Loop variable (46) (Opcode: 0xF3)  - double(0) (byte)
       510,       304: Convert to string (34)
       511,       305: @ (113)
       512,       306: Loop variable (46) (Opcode: 0xF3)  - double(1) (byte)
       515,       307: Call function (6)
       516,       308: Decrease last operand index by 1 (32)
       517,       309: Increment by 1 (52)
       518,       310: Set operation index (1) (Opcode: 0xF4)  - double(299) (word)
       522,       311: Decrease last operand index by 1 (32)
       523,       312: Decrease last operand index by 1 (32)
       524,       313: Decrease last operand index by 1 (32)
       525,       314: type(number) (20) (Opcode: 0xF3)  - double(0) (byte)
       528,       315: }   //End of function code (7)
*/

function testLoop()
{
  for (temp.v : this.obj) {
    echo("T: " @ temp.v);
  }
}
